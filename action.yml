name: "Deploy to Server"
description: "Deploy Docker image to a remote server and manage containers"
author: "Chester Ip"
inputs:
  docker_tag:
    description: "Docker image tag"
    required: true
  ssh_host:
    description: "SSH host"
    required: true
  ssh_username:
    description: "SSH username"
    required: true
  ssh_private_key:
    description: "SSH private key"
    required: true
  template_path:
    description: "Path to the template"
    required: true

runs:
  using: "composite"
  steps:
    - name: SSH into server and deploy
      uses: appleboy/ssh-action@v1.0.0
      env:
        TEMPLATE_PATH: ${{ inputs.template_path }}
        DOCKER_TAG: ${{ inputs.docker_tag }}
        PHP_SCRIPT: |
          $docroot = "/usr/local/emhttp";

          require_once "$docroot/plugins/dynamix.docker.manager/include/DockerClient.php";

          $var = parse_ini_file("/var/local/emhttp/var.ini");
          $cfg = parse_ini_file("/boot/config/docker.cfg");

          $driver = DockerUtil::driver();
          $custom = DockerUtil::custom();
          $subnet = DockerUtil::network($custom);

          $opts = xmlToCommand(getenv("TEMPLATE_PATH"));
          $cmd = str_replace("create ","run -d ",$opts[0]);

          echo $cmd;
      with:
        host: ${{ inputs.ssh_host }}
        username: ${{ inputs.ssh_username }}
        key: ${{ inputs.ssh_private_key }}
        port: 22
        envs: TEMPLATE_PATH,DOCKER_TAG,PHP_SCRIPT
        script_stop: true
        script: |
          docker pull "$DOCKER_TAG"
          echo "Finished pulling docker image."
          echo "Generating command from "$TEMPLATE_PATH""

          DOCKER_CMD=`/usr/bin/php -r "$PHP_SCRIPT"`
          echo "Set DOCKER_CMD"

          CONTAINER_NAME=$(echo $DOCKER_CMD | grep -Eo -- "--name='[^']+'" | grep -Eo "'[^']+'" | grep -Eo "[^']+")               
          echo "Set CONTAINER_NAME"

          echo "Stopping and removing containers..."
          docker stop $CONTAINER_NAME; docker rm $CONTAINER_NAME;
          echo "Stopped and removed existing container..."

          bash -c $DOCKER_CMD
          echo "Re-created container"

          OLD_IMAGES=$(docker images | grep '<none>' | grep "$DOCKER_TAG" | grep -Eo '[0-9a-f]{12}' | tr '\n' ' ' | xargs)

          if [ -n "$OLD_IMAGES" ]; then
            docker image rm $OLD_IMAGES;
            echo "Removed old images";
          fi

branding:
  icon: "server"
  color: "blue"
